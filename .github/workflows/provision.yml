name: Kubernetes Cluster Provisioning

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
      kubernetes_version:
        description: 'Kubernetes version'
        required: true
        default: '1.28.0'

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Terraform Init
        working-directory: ./cluster-provision
        run: terraform init

      - name: Terraform Validate
        working-directory: ./cluster-provision
        run: terraform validate

      - name: Terraform Format Check
        working-directory: ./cluster-provision
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./cluster-provision
        run: |
          cat > terraform.tfvars <<EOF
          region = "${{ github.event.inputs.region }}"
          kubernetes_version = "${{ github.event.inputs.kubernetes_version }}"
          cluster_name = "${{ github.event.inputs.environment }}-k8s"
          tags = {
            Environment = "${{ github.event.inputs.environment }}"
            ManagedBy = "GitHub-Actions"
            Repository = "${{ github.repository }}"
          }
          EOF
          
          terraform plan -out=tfplan

  provision:
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Terraform Init
        working-directory: ./cluster-provision
        run: terraform init

      - name: Create tfvars file
        working-directory: ./cluster-provision
        run: |
          cat > terraform.tfvars <<EOF
          region = "${{ github.event.inputs.region }}"
          kubernetes_version = "${{ github.event.inputs.kubernetes_version }}"
          cluster_name = "${{ github.event.inputs.environment }}-k8s"
          tags = {
            Environment = "${{ github.event.inputs.environment }}"
            ManagedBy = "GitHub-Actions"
            Repository = "${{ github.repository }}"
          }
          EOF

      - name: Terraform Apply
        working-directory: ./cluster-provision
        run: terraform apply -auto-approve

      - name: Save Kubeconfig
        working-directory: ./cluster-provision
        run: |
          mkdir -p $GITHUB_WORKSPACE/kubeconfig
          terraform output -raw kubeconfig > $GITHUB_WORKSPACE/kubeconfig/config
          chmod 600 $GITHUB_WORKSPACE/kubeconfig/config

      - name: Upload Kubeconfig
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: kubeconfig/config
          retention-days: 1

  verify:
    needs: provision
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Download Kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: kubeconfig

      - name: Set KUBECONFIG
        run: |
          chmod 600 kubeconfig/config
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig/config" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify cluster
        run: |
          kubectl get nodes
          kubectl get componentstatuses
          kubectl get pods --all-namespaces
